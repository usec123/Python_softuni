RegEx - search pattern, used for find/find and replace operations on strings

e.g. validating an email -> alnum chars + @ + ends with .com/.bg/.net/...

regex101.com -> text regex for py

[abc] - matches all [a,b,c]
[def]+ - matches all [d,e,f] of any length

\d - digits
\D - NO digits
\b - boundary - chars are at the beginning or at the end of a word
\s - white space
\S - NO white space
\w - word (a-Z0-9_)
\W - NO word

in py:
import re

match = re.search(regex, string)
if match: print('match found:',match.group())
else: print('no match found')

methods:
    search() - returns first occurrence
    findall() - returns list of all occurrences
    start() - returns first index of search() result
    split() - like regular split but for regex
    sub() - substitute (pattern,replacer,string)
    subn() - sub but returns tuple (new_string, substitution_count)

special chars:
    \ - escape char
    . - all except \n
    + - one or more
    * - zero or more
    | - or
    {} - number of occurrences
    ^ - starts with
    $ - ends with - goes after pattern
    ? - between 0 and 1

set - []
[abc] - matches a,b,c
[a-n] - matches a,b,c,...,n
[a-f] - matches all except a-f
[0-5][0-9] - all 2-digit nums between 00 and 59

\1 - uses the same logic as group 1 (has to give same result)

flags - 3rd arg of re functions
    re.IGNORECASE / re.I
    re.MULTILINE / re.M
    re.X - allows comments in regex pattern string