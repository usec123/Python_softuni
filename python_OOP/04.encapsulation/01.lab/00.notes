protected fields:
    there is no truly protected field in Python
    we have to define protected fields via naming convention by putting _ (underscore) in front of the variable name
    protected fields should only be changed via setters or constructors of the class or its children

private fields:
    private fields cannot be accessed or modified, and will raise an error if accessed outside of the class scope
    private fields are declared with __ (2 underscores) in front of the variable name
    private fields are saved using 'name mangling' - their actual name is _{class_name}__{variable_name}
        - name mangling allows us to access and change private fields, which is to be avoided as it's bad practice

@property - getter decorator
def varname(self):
    return self.__varname


@field.setter - setter for field
def varname(self, value):
    # validate


private methods:
    - declared with __ (2*underscore) before method name (def __example())
    - cannot be accessed outside of class scope

manipulate class attributes:
    - getattr(instance, 'attribute', default=None)
        ~ returns attribute value for instance if attribute exists, else returns default value
        ~ raises error if attribute doesn't exist and default value isn't declared
        ~ def __getattr__(self, item): return None => returns None if attribute doesn't exist, else returns attribute value

    - hasattr(instance, 'attribute')
        ~ returns True/False depending on whether the attribute exists
        ~ works by calling getattr()

    - setattr(instance, 'attribute', 'value')
        ~ sets the attribute value of the instance to the given value
        ~ creates new attribute if the given attribute doesn't exist
        ~ returns None
        ~ used to override input
        ~ def __setattr__(self, attr, value): self.__dict__[attr] = value.upper() => all set attributes will be uppercase

    - delattr(instance, 'attribute')
        ~ deletes instance attribute
        ~ called when executing del instance.attribute
        ~ def __delattr__(self, attr): if attr == 'test': raise Exception() => prevents the deletion of 'test' attribute